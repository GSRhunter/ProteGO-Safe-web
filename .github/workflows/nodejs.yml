---

name: build and deploy
on:
  release:
    types:
      - created
  push:
    branches:
      - '*'
    tags-ignore:
      - 'pre-*'
      - 'release-*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set env to DEV
        if: ( startsWith(github.ref, 'refs/heads/dev-') && !contains(github.ref, 'pre') && github.repository_owner != 'ProteGO-Safe' )
        run: |
          echo "::set-env name=ENVIRONMENT::DEV"

      - name: Set env to STAGE
        if: ( startsWith(github.ref, 'refs/tags/pre-') && !contains(github.ref, 'dev') && github.repository_owner != 'ProteGO-Safe' && github.event.release.target_commitish == 'master' )
        run: |
          echo "::set-env name=ENVIRONMENT::STAGE"

      - name: Set env to PROD
        if: ( startsWith(github.ref, 'refs/tags/release-') && !contains(github.ref, 'pre') && !contains(github.ref, 'dev') && github.repository_owner == 'ProteGO-Safe' && github.event.release.target_commitish == 'master' )
        run: |
          echo "::set-env name=ENVIRONMENT::PROD"

      - name: Show GITHUB_CONTEXT
        run: |
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        if: env.ENVIRONMENT != 'PROD'

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: yarn audit --groups dependencies

      - run: yarn install

      - run: yarn build

      - run: cp firebase.json build/
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )

      - name: Archive Artifact
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/release-') || startsWith(github.ref, 'refs/tags/rc-')  || startsWith(github.ref, 'refs/heads/dev-') }}
    steps:

      - name: Set env to DEV
        if: ( startsWith(github.ref, 'refs/heads/dev-') && !contains(github.ref, 'pre') && github.repository_owner != 'ProteGO-Safe' )
        run: |
          echo "::set-env name=ENVIRONMENT::DEV"

      - name: Set env to STAGE
        if: ( startsWith(github.ref, 'refs/tags/pre-') && !contains(github.ref, 'dev') && github.repository_owner != 'ProteGO-Safe' && github.event.release.target_commitish == 'master' )
        run: |
          echo "::set-env name=ENVIRONMENT::STAGE"

      - name: Set env to PROD
        if: ( startsWith(github.ref, 'refs/tags/release-') && !contains(github.ref, 'pre') && !contains(github.ref, 'dev') && github.repository_owner == 'ProteGO-Safe' && github.event.release.target_commitish == 'master' )
        run: |
          echo "::set-env name=ENVIRONMENT::PROD"

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build

      - name: Set Env's from Git refs.
        run: |
          echo "::set-env name=SOURCE_NAME::${GITHUB_REF#refs/*/}"
          echo "::set-env name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}"
          echo "::set-env name=SOURCE_TAG::${GITHUB_REF#refs/tags/}"
          echo "::set-env name=GCP_SA_KEY::${{ secrets[env.SECRET_ENV] }}"
          echo "::set-env name=SECRET_PROJECT::${{ secrets[env.PROJECT_ENV] }}"
          echo "::set-env name=SITE_PROJECT::${{ secrets[env.SITE_ENV] }}"
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"

      - name: Sed Firebase.json
        run: sed -ie 's|site_to_sed|${{ env.SECRET_PROJECT }}|g' firebase.json

      - name: Deploy to Firebase
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting --project $SECRET_PROJECT
